# UI Best Practices for Web Applications

This rule enforces best practices for creating beautiful, user-friendly web interfaces with a focus on chat and messaging applications.

<rule>
name: ui_best_practices
description: Enforce best practices for creating beautiful, user-friendly web interfaces
filters:
  - type: file_extension
    pattern: "\\.(tsx|jsx)$"
  - type: content
    pattern: "(?i)(component|interface|ui|ux|design|style|chat|message)"

actions:
  - type: suggest
    conditions:
      # If using basic styling without proper visual hierarchy
      - pattern: "<div\\s+className=['\"][^'\"]*['\"]>\\s*<div\\s+className=['\"][^'\"]*['\"]>"
        message: "Consider using a component library and proper layout components for better visual hierarchy"
      # If not handling loading states
      - pattern: "\\bsetIsLoading\\s*\\([^)]*\\)"
        message: "Ensure loading states are visually communicated to users with appropriate indicators"
      # If not handling error states
      - pattern: "\\bcatch\\s*\\([^)]*\\)\\s*\\{[^}]*\\}"
        message: "Ensure error states are properly displayed to users with clear recovery options"
      # If not handling empty states
      - pattern: "\\{\\s*[a-zA-Z0-9_]+\\.map\\s*\\("
        message: "Consider adding empty state handling when collections might be empty"
      # If not using responsive design
      - pattern: "width|height|margin|padding"
        message: "Ensure UI is responsive across different device sizes using relative units and breakpoints"
    message: |
      ## UI Best Practices

      Follow these guidelines for creating beautiful, user-friendly interfaces:

      1. **Visual Hierarchy and Layout**
         - Use proper spacing and alignment to create visual hierarchy
         - Group related elements together
         - Use consistent margins and padding
         - Implement responsive design for all screen sizes
      
      2. **Feedback and States**
         - Provide immediate visual feedback for user actions
         - Handle all UI states: loading, error, empty, success
         - Use appropriate animations for transitions
         - Implement skeleton loaders for content that takes time to load
      
      3. **Error Handling and Recovery**
         - Display clear error messages
         - Provide recovery options when errors occur
         - Auto-retry for transient errors when appropriate
         - Preserve user input during errors
      
      4. **Connection Management**
         - Show connection status clearly
         - Implement automatic reconnection
         - Queue actions when offline
         - Provide manual reconnect options
      
      5. **Accessibility**
         - Ensure sufficient color contrast
         - Provide text alternatives for non-text content
         - Make all functionality keyboard accessible
         - Use semantic HTML elements
      
      6. **Performance**
         - Optimize rendering performance
         - Implement virtualization for long lists
         - Lazy load components and assets
         - Use appropriate caching strategies

      ### Example of Good UI for Chat Interface:
      ```tsx
      <Container maxW="container.md" p={0} h="100vh">
        <VStack h="full" spacing={0} borderRadius="lg" overflow="hidden" boxShadow="lg">
          {/* Header with clear status indication */}
          <Box w="full" bg={headerBg} p={4} borderBottom="1px" borderColor={borderColor}>
            <HStack justify="space-between">
              <HStack>
                <Avatar bg="blue.500" name="Chat App" size="sm" />
                <VStack align="start" spacing={0}>
                  <Heading size="md">Chat Application</Heading>
                  <Text fontSize="xs" color="gray.500">Connected as: {username}</Text>
                </VStack>
              </HStack>
              <ConnectionStatus />
            </HStack>
          </Box>

          {/* Clear error handling */}
          {error && (
            <Alert status="error" variant="left-accent">
              <AlertIcon />
              {error}
              <Button size="sm" ml="auto" onClick={handleReconnect}>
                Retry
              </Button>
            </Alert>
          )}

          {/* Message area with proper scrolling */}
          <Box w="full" flex="1" overflowY="auto" p={4} bg={bgColor}>
            <MessageList messages={messages} />
            {isLoading && <TypingIndicator />}
            <div ref={messagesEndRef} />
          </Box>

          {/* Input area with clear affordances */}
          <Box w="full" p={4} borderTop="1px" borderColor={borderColor} bg={headerBg}>
            <HStack>
              <Input
                placeholder="Type your message..."
                value={input}
                onChange={handleInputChange}
                disabled={!isConnected}
                _focus={{ borderColor: "blue.500" }}
              />
              <Button
                colorScheme="blue"
                onClick={handleSend}
                isLoading={isSending}
                disabled={!isConnected || !input.trim()}
              >
                Send
              </Button>
            </HStack>
          </Box>
        </VStack>
      </Container>
      ```

examples:
  - input: |
      // Bad: Poor error handling and no loading states
      function ChatComponent() {
        const [messages, setMessages] = useState([]);
        const [input, setInput] = useState('');
        
        const sendMessage = () => {
          fetch('/api/send', {
            method: 'POST',
            body: JSON.stringify({ message: input })
          })
          .then(res => res.json())
          .then(data => {
            setMessages([...messages, data]);
            setInput('');
          })
          .catch(err => console.error(err));
        };
        
        return (
          <div className="chat-container">
            <div className="messages">
              {messages.map(msg => (
                <div key={msg.id} className="message">
                  {msg.text}
                </div>
              ))}
            </div>
            <div className="input-area">
              <input 
                value={input} 
                onChange={e => setInput(e.target.value)} 
              />
              <button onClick={sendMessage}>Send</button>
            </div>
          </div>
        );
      }
    output: |
      // Good: Proper state handling and user feedback
      function ChatComponent() {
        const [messages, setMessages] = useState([]);
        const [input, setInput] = useState('');
        const [isLoading, setIsLoading] = useState(false);
        const [error, setError] = useState(null);
        const messagesEndRef = useRef(null);
        
        // Auto-scroll to bottom when messages change
        useEffect(() => {
          messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
        }, [messages]);
        
        const sendMessage = async () => {
          if (!input.trim()) return;
          
          setIsLoading(true);
          setError(null);
          
          // Optimistic UI update
          const tempId = `temp-${Date.now()}`;
          const tempMessage = { 
            id: tempId, 
            text: input, 
            sender: 'user',
            status: 'sending' 
          };
          
          setMessages(prev => [...prev, tempMessage]);
          setInput('');
          
          try {
            const response = await fetch('/api/send', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ message: input })
            });
            
            if (!response.ok) {
              throw new Error(`Error: ${response.status}`);
            }
            
            const data = await response.json();
            
            // Replace temp message with real one
            setMessages(prev => 
              prev.map(msg => msg.id === tempId ? { ...data, status: 'sent' } : msg)
            );
          } catch (err) {
            setError(`Failed to send message: ${err.message}`);
            
            // Update temp message to show error
            setMessages(prev => 
              prev.map(msg => msg.id === tempId ? { ...msg, status: 'error' } : msg)
            );
          } finally {
            setIsLoading(false);
          }
        };
        
        return (
          <Box borderRadius="lg" overflow="hidden" boxShadow="md" bg="white">
            <Box p={4} borderBottom="1px" borderColor="gray.200">
              <Heading size="md">Chat</Heading>
              {error && (
                <Alert status="error" mt={2} size="sm">
                  <AlertIcon />
                  {error}
                  <CloseButton position="absolute" right="8px" top="8px" onClick={() => setError(null)} />
                </Alert>
              )}
            </Box>
            
            <Box height="400px" overflowY="auto" p={4} bg="gray.50">
              {messages.length === 0 ? (
                <Text color="gray.500" textAlign="center" py={8}>
                  No messages yet. Start the conversation!
                </Text>
              ) : (
                messages.map(msg => (
                  <MessageBubble key={msg.id} message={msg} />
                ))
              )}
              {isLoading && <TypingIndicator />}
              <div ref={messagesEndRef} />
            </Box>
            
            <HStack p={4} borderTop="1px" borderColor="gray.200">
              <Input
                value={input}
                onChange={e => setInput(e.target.value)}
                placeholder="Type a message..."
                onKeyPress={e => e.key === 'Enter' && sendMessage()}
                disabled={isLoading}
              />
              <Button
                colorScheme="blue"
                onClick={sendMessage}
                isLoading={isLoading}
                disabled={!input.trim()}
              >
                Send
              </Button>
            </HStack>
          </Box>
        );
      }
  
  - input: |
      // Bad: Poor connection handling
      function WebSocketChat() {
        const [connected, setConnected] = useState(false);
        const [messages, setMessages] = useState([]);
        const socket = useRef(null);
        
        useEffect(() => {
          socket.current = new WebSocket('ws://example.com/chat');
          
          socket.current.onopen = () => {
            setConnected(true);
          };
          
          socket.current.onmessage = (event) => {
            const message = JSON.parse(event.data);
            setMessages(prev => [...prev, message]);
          };
          
          socket.current.onclose = () => {
            setConnected(false);
          };
          
          return () => {
            socket.current.close();
          };
        }, []);
        
        const sendMessage = (text) => {
          if (connected) {
            socket.current.send(JSON.stringify({ text }));
          }
        };
        
        return (
          <div>
            {!connected && <div>Disconnected</div>}
            <div className="messages">
              {messages.map(msg => (
                <div key={msg.id}>{msg.text}</div>
              ))}
            </div>
            <input onKeyPress={e => e.key === 'Enter' && sendMessage(e.target.value)} />
          </div>
        );
      }
    output: |
      // Good: Robust connection handling with reconnection
      function WebSocketChat() {
        const [connectionStatus, setConnectionStatus] = useState('connecting');
        const [messages, setMessages] = useState([]);
        const [input, setInput] = useState('');
        const [reconnectAttempts, setReconnectAttempts] = useState(0);
        const socket = useRef(null);
        const reconnectTimeoutRef = useRef(null);
        const messageQueue = useRef([]);
        
        const connect = useCallback(() => {
          setConnectionStatus('connecting');
          
          socket.current = new WebSocket('ws://example.com/chat');
          
          socket.current.onopen = () => {
            setConnectionStatus('connected');
            setReconnectAttempts(0);
            
            // Send any queued messages
            if (messageQueue.current.length > 0) {
              messageQueue.current.forEach(msg => {
                socket.current.send(JSON.stringify(msg));
              });
              messageQueue.current = [];
            }
          };
          
          socket.current.onmessage = (event) => {
            const message = JSON.parse(event.data);
            setMessages(prev => [...prev, message]);
          };
          
          socket.current.onclose = (event) => {
            setConnectionStatus('disconnected');
            
            // Don't attempt to reconnect if this was intentional
            if (event.code !== 1000) {
              attemptReconnect();
            }
          };
          
          socket.current.onerror = () => {
            setConnectionStatus('error');
          };
        }, []);
        
        const attemptReconnect = useCallback(() => {
          if (reconnectAttempts >= 5) {
            setConnectionStatus('failed');
            return;
          }
          
          // Exponential backoff
          const timeout = Math.min(30000, 1000 * Math.pow(2, reconnectAttempts));
          
          reconnectTimeoutRef.current = setTimeout(() => {
            setReconnectAttempts(prev => prev + 1);
            connect();
          }, timeout);
        }, [reconnectAttempts, connect]);
        
        useEffect(() => {
          connect();
          
          return () => {
            if (socket.current) {
              socket.current.close(1000, 'Component unmounted');
            }
            if (reconnectTimeoutRef.current) {
              clearTimeout(reconnectTimeoutRef.current);
            }
          };
        }, [connect]);
        
        const sendMessage = () => {
          if (!input.trim()) return;
          
          const message = {
            id: Date.now().toString(),
            text: input,
            sender: 'user',
            timestamp: new Date().toISOString()
          };
          
          // Optimistic UI update
          setMessages(prev => [...prev, { ...message, status: 'sending' }]);
          setInput('');
          
          if (connectionStatus === 'connected') {
            try {
              socket.current.send(JSON.stringify(message));
              
              // Update message status to sent
              setMessages(prev => 
                prev.map(msg => msg.id === message.id ? { ...msg, status: 'sent' } : msg)
              );
            } catch (err) {
              // Update message status to error
              setMessages(prev => 
                prev.map(msg => msg.id === message.id ? { ...msg, status: 'error' } : msg)
              );
            }
          } else {
            // Queue message for when connection is restored
            messageQueue.current.push(message);
            
            // Update message status to queued
            setMessages(prev => 
              prev.map(msg => msg.id === message.id ? { ...msg, status: 'queued' } : msg)
            );
            
            // Try to reconnect
            if (connectionStatus === 'disconnected' || connectionStatus === 'error') {
              connect();
            }
          }
        };
        
        return (
          <Box borderRadius="lg" overflow="hidden" boxShadow="md">
            <Box p={3} bg="blue.500" color="white">
              <HStack justify="space-between">
                <Heading size="sm">WebSocket Chat</Heading>
                <ConnectionStatusBadge status={connectionStatus} attempts={reconnectAttempts} onReconnect={connect} />
              </HStack>
            </Box>
            
            <Box height="400px" overflowY="auto" p={4} bg="gray.50">
              {messages.map(msg => (
                <MessageBubble key={msg.id} message={msg} />
              ))}
            </Box>
            
            <HStack p={3} bg="white" borderTop="1px" borderColor="gray.200">
              <Input
                value={input}
                onChange={e => setInput(e.target.value)}
                placeholder="Type a message..."
                onKeyPress={e => e.key === 'Enter' && sendMessage()}
                disabled={connectionStatus !== 'connected'}
              />
              <Button
                colorScheme="blue"
                onClick={sendMessage}
                isDisabled={connectionStatus !== 'connected' || !input.trim()}
              >
                Send
              </Button>
            </HStack>
          </Box>
        );
      }

metadata:
  priority: high
  version: 1.0
</rule> 